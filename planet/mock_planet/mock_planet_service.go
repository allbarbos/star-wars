// Code generated by MockGen. DO NOT EDIT.
// Source: service/planet/planet_service.go

// Package mock_planet is a generated GoMock package.
package mock_planet

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	entity "star-wars/entity"
)

// MockPlanetService is a mock of PlanetService interface
type MockPlanetService struct {
	ctrl     *gomock.Controller
	recorder *MockPlanetServiceMockRecorder
}

// MockPlanetServiceMockRecorder is the mock recorder for MockPlanetService
type MockPlanetServiceMockRecorder struct {
	mock *MockPlanetService
}

// NewMockPlanetService creates a new mock instance
func NewMockPlanetService(ctrl *gomock.Controller) *MockPlanetService {
	mock := &MockPlanetService{ctrl: ctrl}
	mock.recorder = &MockPlanetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlanetService) EXPECT() *MockPlanetServiceMockRecorder {
	return m.recorder
}

// Exists mocks base method
func (m *MockPlanetService) Exists(name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockPlanetServiceMockRecorder) Exists(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockPlanetService)(nil).Exists), name)
}

// Save mocks base method
func (m *MockPlanetService) Save(planet entity.Planet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", planet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockPlanetServiceMockRecorder) Save(planet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPlanetService)(nil).Save), planet)
}
