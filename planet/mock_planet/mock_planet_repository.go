// Code generated by MockGen. DO NOT EDIT.
// Source: planet_repository.go

// Package mock_planet is a generated GoMock package.
package mock_planet

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	entity "star-wars/entity"
)

// MockPlanetRepository is a mock of PlanetRepository interface
type MockPlanetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlanetRepositoryMockRecorder
}

// MockPlanetRepositoryMockRecorder is the mock recorder for MockPlanetRepository
type MockPlanetRepositoryMockRecorder struct {
	mock *MockPlanetRepository
}

// NewMockPlanetRepository creates a new mock instance
func NewMockPlanetRepository(ctrl *gomock.Controller) *MockPlanetRepository {
	mock := &MockPlanetRepository{ctrl: ctrl}
	mock.recorder = &MockPlanetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlanetRepository) EXPECT() *MockPlanetRepositoryMockRecorder {
	return m.recorder
}

// FindByName mocks base method
func (m *MockPlanetRepository) FindByName(name string) (entity.Planet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].(entity.Planet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName
func (mr *MockPlanetRepositoryMockRecorder) FindByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockPlanetRepository)(nil).FindByName), name)
}

// Save mocks base method
func (m *MockPlanetRepository) Save(planet entity.Planet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", planet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockPlanetRepositoryMockRecorder) Save(planet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPlanetRepository)(nil).Save), planet)
}
